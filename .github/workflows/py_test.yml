name: Python Script Workflow
on:
  push:
    branches:
      - main
  workflow_dispatch: # Add this to make it manually dispatchable

env:
  ORG_NAME: Kaustubh-pande  # <-- set your org name here

jobs:
  run_python:
    runs-on: ubuntu-latest
    outputs:
          repo: ${{ steps.changed-repos.outputs.repos }}
          matrix: ${{ steps.set-matrix.outputs.matrix_b64 }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
            fetch-depth: 2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Python dependencies
        run: pip install pyyaml requests python-dateutil

      - name: Get previous access-control.yaml
        run: |
          git fetch origin main
          git show origin/main^:config/access-control.yaml > previous.yaml


      - name: Run Python inline
        id: changed-repos
        run: |
          repos=$(python3 - <<'EOF'
          import sys
          import yaml
          import json
          
          def load_yaml(path):
              try:
                  with open(path) as f:
                      return yaml.safe_load(f) or {}
              except FileNotFoundError:
                  print(f"‚ö†Ô∏è File not found: {path}")
                  return {}
              except Exception as e:
                  print(f"‚ùå Failed to load YAML from {path}: {e}")
                  sys.exit(1)
          
          def normalize_list(lst):
              if not lst:
                  return []
              return sorted(set(str(i) for i in lst))
          
          def list_changed(old_list, new_list):
              return normalize_list(old_list) != normalize_list(new_list)
          
          def repo_access_changed(old_repo, new_repo):
              for key in ['reviewers', 'approvers']:
                  old_list = old_repo.get(key, [])
                  new_list = new_repo.get(key, [])
                  if list_changed(old_list, new_list):
                      return True
              return False
          
          def main():
              # if len(sys.argv) != 3:
              #     print("Usage: python get_changed_repos.py <old_yaml> <new_yaml>")
              #     sys.exit(1)
          
              old_path= 'previous.yaml'
              new_path = 'config/access-control.yaml'
          
              old_data = load_yaml(old_path)
              new_data = load_yaml(new_path)
          
              old_admins = old_data.get('admins', [])
              new_admins = new_data.get('admins', [])
          
              old_repos = old_data.get('repos', {})
              new_repos = new_data.get('repos', {})
          
              # ‚úÖ If admins changed, update all repos
              if list_changed(old_admins, new_admins):
                  print(json.dumps(sorted(new_repos.keys())))
                  return
          
              # ‚úÖ Compare per-repo access changes
              changed_repos = []
              all_repo_names = set(old_repos.keys()).union(new_repos.keys())
          
              for repo in sorted(all_repo_names):
                  old_repo = old_repos.get(repo, {})
                  new_repo = new_repos.get(repo, {})
                  if repo_access_changed(old_repo, new_repo):
                      changed_repos.append(repo)
              changed_repos = json.dumps(changed_repos)
              print(changed_repos)
              
          
          if __name__ == "__main__":
              main()
          EOF
          )
          echo "repos=${repos}" >> "$GITHUB_OUTPUT"

      - name: Get active branches for changed repos
        id: set-matrix
        run: |
            matrix=$(python3 <<EOF
            import os
            import sys
            import json
            import requests
            from datetime import datetime, timedelta, timezone
            from dateutil import parser
            
            print(os.getenv("REPOS"))
            GITHUB_API = "https://api.github.com"
            ORG = os.getenv("ORG_NAME")
            TOKEN = os.getenv("GITHUB_TOKEN")
            DAYS_ACTIVE = int(os.getenv("BRANCH_ACTIVE_DAYS", 90))
            
            if not TOKEN or not ORG:
                print("‚ùå GITHUB_TOKEN or ORG_NAME not set in environment")
                sys.exit(1)
            
            headers = {"Authorization": f"token {TOKEN}"}
            cutoff = datetime.now(timezone.utc) - timedelta(days=DAYS_ACTIVE)
            
            def get_default_branch(repo):
                url = f"{GITHUB_API}/repos/{ORG}/{repo}"
                resp = requests.get(url, headers=headers)
                resp.raise_for_status()
                return resp.json().get("default_branch", "main")
            
            def get_active_branches(repo):
                branches = []
                url = f"{GITHUB_API}/repos/{ORG}/{repo}/branches?per_page=100"
                resp = requests.get(url, headers=headers)
                resp.raise_for_status()
                for branch in resp.json():
                    name = branch["name"]
                    commit_url = branch["commit"]["url"]
                    commit_resp = requests.get(commit_url, headers=headers)
                    commit_resp.raise_for_status()
                    # commit_date = commit_resp.json()["commit"]["committer"]["date"]
                    commit_date = parser.isoparse(commit_resp.json()["commit"]["committer"]["date"])
                    # dt = datetime.strptime(commit_date, "%Y-%m-%dT%H:%M:%SZ")
                    if commit_date >= cutoff:  # Safe comparison
                        branches.append(name)
                    # if dt >= cutoff:
                    #     branches.append(name)
                return branches
            
            def main():
                repos_json = os.getenv('REPOS')
                changed_repos = json.loads(repos_json or '[]')            
                 # Exit early if nothing changed
                if not changed_repos:
                  print("üõë No repositories changed. Skipping.")
                  sys.exit(0)
                
                matrix = []
            
                for repo in changed_repos:
                    try:
                        default_branch = get_default_branch(repo)
                        active = set(get_active_branches(repo))
                        active.add(default_branch)
                        for branch in sorted(active):
                            matrix.append({"repo": repo, "branch": branch})
                    except Exception as e:
                        print(f"‚ö†Ô∏è Failed to process repo {repo}: {e}", file=sys.stderr)
            
                matrix=json.dumps(matrix)
                print(matrix)
            if __name__ == "__main__":
                main()
            EOF
            )
            compact=$(echo "$matrix" | jq -c .)
            encoded=$(echo "$compact" | base64)
            echo "matrix_b64=$encoded" >> "$GITHUB_OUTPUT"

            # echo "matrix=$encoded" >> "$GITHUB_OUTPUT"
            echo "üîê Encoded matrix output ready"

        env:
            GITHUB_TOKEN: ${{ secrets.TOKEN }}
            REPOS: ${{ steps.changed-repos.outputs.repos }}
      - name: Print out
        run: |
          echo ${{ steps.changed-repos.outputs.repos }}
          echo "${{ steps.set-matrix.outputs.matrix_b64 }}" | base64 --decode

