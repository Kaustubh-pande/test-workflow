import argparse
import os
import sys
import yaml

def load_access_control_config(config_path=None):
    if config_path:
        path = config_path
    else:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        path = os.path.join(script_dir, '..', 'config', 'access-control.yaml')

    with open(path) as f:
        return yaml.safe_load(f)

def generate_owners_file(repo_name, access_control):
    admins = access_control.get('admins', [])
    repos = access_control.get('repos', {})

    repo_info = repos.get(repo_name, {})

    # Safely default reviewers and approvers to empty lists
    repo_reviewers = repo_info.get('reviewers') or []
    repo_approvers = repo_info.get('approvers') or []

    reviewers = set(repo_reviewers + admins)
    approvers = set(repo_approvers + admins)

    # Validation: must have at least one reviewer and one approver
    if not reviewers:
        raise ValueError(f"‚ùå No reviewers found for repo {repo_name} after adding admins.")
    if not approvers:
        raise ValueError(f"‚ùå No approvers found for repo {repo_name} after adding admins.")

    owners_content = {
        'reviewers': sorted(reviewers),
        'approvers': sorted(approvers)
    }

    with open('OWNERS', 'w') as f:
        f.write("# This OWNERS file is auto-generated by GitHub Action from hack access-control.yaml\n")
        yaml.dump(owners_content, f, default_flow_style=False)

    print(f"‚úÖ Successfully generated OWNERS file for {repo_name}")

def validate_owners_file():
    with open('OWNERS') as f:
        owners = yaml.safe_load(f)

    if not isinstance(owners, dict):
        raise ValueError("‚ùå OWNERS file is not a valid YAML dictionary.")
    if 'reviewers' not in owners or 'approvers' not in owners:
        raise ValueError("‚ùå OWNERS file must contain 'reviewers' and 'approvers' sections.")

    for field in ['reviewers', 'approvers']:
        if not isinstance(owners[field], list):
            raise ValueError(f"‚ùå '{field}' must be a list of strings.")
        if not owners[field]:
            raise ValueError(f"‚ùå '{field}' must not be empty.")
        for user in owners[field]:
            if not isinstance(user, str):
                raise ValueError(f"‚ùå '{field}' must be a list of strings.")

    print("‚úÖ OWNERS file validation successful!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate OWNERS file")
    parser.add_argument("repo_name", help="Name of the repo to generate OWNERS for")
    parser.add_argument(
        "--access-control",
        help="Path to access-control.yaml (default: ../config/access-control.yaml)"
    )

    args = parser.parse_args()

    print(f"üîµ Generating OWNERS for repo: {args.repo_name}")

    access_control = load_access_control_config(args.access_control)
    generate_owners_file(args.repo_name, access_control)
    validate_owners_file()
